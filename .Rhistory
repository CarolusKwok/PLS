library(devtools)
use_r("interview_1_1")
?invisible
library(PLS)
library(PLS)
library(PLS)
library(PLS)
choose_num = 2
choose_num = readline(prompt = "Enter ROW number: ")
is.numeric(choose_num)
choose_num = as.integer(choose_num)
is.numeric(choose_num)
choose_num = readline(prompt = "Enter ROW number: ")
choose_num = as.integer(choose_num)
choose_num = readline(prompt = "Enter ROW number: ")
choose_num = readline(prompt = "Enter ROW number: ")
choose_num = suppressWarnings(as.integer(choose_num))
is.integer(choose_num)
is.na(choose_num)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
?distinct
library(PLS)
usethis::use_pipe()
library(PLS)
use_mit_license()
usethis::browse_circleci()
usethis::use_mit_license()
usethis::use_package("dplyr")
library(PLS)
library(PLS)
library(PLS)
set.seed(seed = Sys.time())
library(PLS)
set.seed()
set.seed(seed = 1)
usethis::use_package("tibble")
usethis::use_package("xibble")
usethis::use_package("cli")
library(PLS)
PLS::interview_1n1()
cli::cli_format_method()
cli::cli_text("       gajlkfka")
library(PLS)
library(PLS)
library(PLS)
cli::cli_text("fsaf", 123)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
usethis::use_r(RUSure)
usethis::use_r("RUSure")
library(PLS)
usethis::use_r("sample_random")
tibble::tibble(a = c(1,2,3))
library(PLS)
tibble::tibble(a = c(1,2,3))$a[1]
tibble::tibble(a = c("a",2,3))$a[1]
(Sys.time() * 2)
as.numeric(Sys.time())
library(PLS)
?sample_random
library(PLS)
usethis::use_r("sample_categorized")
library(PLS)
c("a", "b")
c("a", "b")[1]
c("a", "b")[2]
library(PLS)
else if
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
library(PLS)
usethis::use_r("enter_number")
Inf
0 < Inf
4210948092 < Inf
Inf < Inf
Inf <= Inf
min(c(-Inf, 2213,321321,42142,000, -99999999999999999999999999999999999999999))
library(PLS)
library(PLS)
library(PLS)
PLS::enter_integer
PLS:::enter_integer
PLS:::enter_integer()
library(PLS)
PLS:::enter_integer()
0 <= NA
0 <= NA & TRUE
PLS:::RUSure()
PLS:::RUSure()
PLS:::RUSure()
library(PLS)
library(PLS)
